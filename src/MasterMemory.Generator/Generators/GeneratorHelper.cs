using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using MasterMemory.Generator.Models;
using Microsoft.CodeAnalysis;

namespace MasterMemory.Generator;

internal static class GeneratorHelper
{
    public static List<KeyGroupModel> ToGroups(this IEnumerable<KeyModel> keys)
    {
        var keyGroups = new List<KeyGroupModel>();
        var groupBy = keys.GroupBy(k => k.GroupIndex);
        foreach (var group in groupBy)
        {
            if (group.Key == null)
            {
                foreach (KeyModel model in group)
                {
                    keyGroups.Add(new(model));
                }
            }
            else
            {
                keyGroups.Add(new(group.ToArray()));
            }
        }

        return keyGroups;
    }

    public static void AppendUsings(this StringBuilder sb, DatabaseModel database)
    {
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("using System.Collections;");
        sb.AppendLine("using System.Collections.Generic;");

        if (database.IsMultithreaded)
        {
            sb.AppendLine("using System.Collections.Concurrent;");
            sb.AppendLine("using System.Threading;");
            sb.AppendLine("using System.Threading.Tasks;");
        }

        if (database.HasFlag(DatabaseFlags.MemoryPack))
        {
            sb.AppendLine("using MemoryPack;");
            sb.AppendLine("using MemoryPack.Formatters;");
            sb.AppendLine("using System.Buffers;");
        }

        if (database.HasFlag(DatabaseFlags.R3))
        {
            sb.AppendLine("using R3;");
        }
        else if (database.HasFlag(DatabaseFlags.UniRx))
        {
            sb.AppendLine("using UniRx;");
        }

        if (database.HasFlag(DatabaseFlags.SystemTextJson))
        {
            sb.AppendLine("using System.Text.Json;");
        }
        else if (database.HasFlag(DatabaseFlags.NewtonsoftJson))
        {
            sb.AppendLine("using Newtonsoft.Json;");
        }

        sb.AppendLine("using MasterMemory;");
        sb.AppendLine("using MasterMemory.Validation;");
        sb.AppendLine("using MasterMemory.Meta;");
    }

    public static bool IsMultithreadedTransaction(this ImmutableArray<TableModel> tableArray)
    {
        return tableArray[0].DatabaseModel.IsMultithreaded && tableArray.Any(x => x.IsMultithreadedModifications);
    }

    public static DatabaseFlags GetReferencedFlags(this Compilation compilation)
    {
        var flags = DatabaseFlags.None;
        foreach (AssemblyIdentity assembly in compilation.ReferencedAssemblyNames)
        {
            switch (assembly.Name)
            {
                case "Cysharp.Threading.Tasks":
                    flags |= DatabaseFlags.UniTask;
                    break;
                case "UniRx":
                    flags |= DatabaseFlags.UniRx;
                    break;
                case "R3":
                    flags |= DatabaseFlags.R3;
                    break;
                case "MemoryPack.Annotations":
                case "MemoryPack.Core":
                    flags |= DatabaseFlags.MemoryPack;
                    break;
                case "System.Text.Json":
                    flags |= DatabaseFlags.SystemTextJson;
                    break;
            }
        }

        return flags;
    }

    public static void AppendUsings(this StringBuilder sb, ImmutableArray<TableModel> tableArray)
    {
        sb.AppendUsings(tableArray[0].DatabaseModel);
        foreach (string? @namespace in tableArray.Select(x => x.Namespace).Distinct())
        {
            if (string.IsNullOrWhiteSpace(@namespace))
            {
                continue;
            }

            sb.Append("using ").Append(@namespace).AppendLine(";");
        }

        sb.AppendLine();
    }

    public static int GetModificationThreadCount(this ImmutableArray<TableModel> tableArray)
    {
        int count = 0;
        foreach (TableModel model in tableArray)
        {
            if (model.IsMultithreadedModifications)
            {
                count += model.ThreadCount;
            }
        }

        return count;
    }

    public static StringBuilder AppendDefaultMaxDegreeOfParallelism(this StringBuilder sb,
        ImmutableArray<TableModel> tableModels)
    {
        int count = tableModels.GetModificationThreadCount();
        return sb.Append("System.Math.Min(System.Environment.ProcessorCount, ").Append(count).Append(")");
    }

    public static bool TryGetSize(this SpecialType specialType, out int size)
    {
        size = specialType switch
        {
            SpecialType.System_Boolean => 1,
            SpecialType.System_Char => 2,
            SpecialType.System_SByte => 1,
            SpecialType.System_Byte => 1,
            SpecialType.System_Int16 => 2,
            SpecialType.System_UInt16 => 2,
            SpecialType.System_Int32 => 4,
            SpecialType.System_UInt32 => 4,
            SpecialType.System_Int64 => 8,
            SpecialType.System_UInt64 => 8,
            SpecialType.System_Single => 4,
            SpecialType.System_Double => 8,
            SpecialType.System_Decimal => 16,
            SpecialType.System_DateTime => 8,
            _ => 0
        };

        return size > 0;
    }

    public static string GetAccessibilityModifier(this ITypeSymbol accessibility)
    {
        return accessibility.DeclaredAccessibility switch
        {
            Accessibility.Public => "public",
            Accessibility.Protected => "protected",
            Accessibility.ProtectedOrInternal => "protected internal",
            Accessibility.Internal => "internal",
            Accessibility.Private => "private",
            Accessibility.ProtectedAndInternal => "private protected",
            Accessibility.NotApplicable => "internal",
            _ => throw new ArgumentOutOfRangeException(nameof(accessibility), accessibility, null)
        };
    }
}